name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  cheeck_formatting:
    name: 'ensure cargo fmt'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          components: rustfmt
      - uses: actions/checkout@v2
      - run: cargo fmt -- --check

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-18.04 }
          # windows
          # - { target: x86_64-pc-windows-gnu, os: windows-2019 }
          # - { target: x86_64-pc-windows-gnu, os: windows-2019 }
          # osx
          - { target: x86_64-apple-darwin, os: macos-11 }
          - { target: aarch64-apple-darwin, os: macos-11 }

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      # we need to skip this for apple silicon target
      - name: Test
        if: ${{ matrix.job.target != "aarch64-apple-darwin" }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target=${{ matrix.job.target }}

      - name: Build release target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.job.target }}

      - name: Build archive
        shell: bash
        run: |
          version=$(cargo pkgid confpiler_cli | cut -d# -f2 | cut -d: -f2)
          package_dir="confpiler-${version}-${{ matrix.job.target }}"
          archive="${package_dir}.tar.gz"
          mkdir -p "${package_dir}"

          cp target/${{ matrix.job.target }}/release/confpiler "${package_dir}/"
          tar czf "${archive}" "${package_dir}"
          echo "ARCHIVE=${archive}" >> $GITHUB_ENV

      - name: Store artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARCHIVE }}
          path: ${{ env.ARCHIVE }}
